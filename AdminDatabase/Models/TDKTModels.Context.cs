//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdminDatabase.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TDKTEntities : DbContext
    {
        public TDKTEntities()
            : base("name=TDKTEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblApp> tblApps { get; set; }
        public virtual DbSet<tblRoleAction> tblRoleActions { get; set; }
        public virtual DbSet<tblAction> tblActions { get; set; }
    
        public virtual ObjectResult<string> sp_getRolesforUser(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_getRolesforUser", userIdParameter);
        }
    
        public virtual ObjectResult<string> sp_getAllowedRoles(string action, string controller, Nullable<int> appId)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("Controller", controller) :
                new ObjectParameter("Controller", typeof(string));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_getAllowedRoles", actionParameter, controllerParameter, appIdParameter);
        }
    
        public virtual ObjectResult<sp_listApps_Result> sp_listApps()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_listApps_Result>("sp_listApps");
        }
    }
}
